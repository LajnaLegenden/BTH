%top{
#include "parser.tab.hh"
#define YY_DECL yy::parser::symbol_type yylex()
#include "Node.h"
int lexical_errors = 0;
}
%option yylineno noyywrap nounput batch noinput stack 
%%
"while" {if(USE_LEX_ONLY) {printf("WHILE");} else {return yy::parser::make_WHILE(yytext);}}
"class" {if(USE_LEX_ONLY) {printf("CLASSDEF");} else {return yy::parser::make_CLASSDEF(yytext);}}
"&&"    {if(USE_LEX_ONLY) {printf("ANDOP");} else {return yy::parser::make_ANDOP(yytext);}}
"||"    {if(USE_LEX_ONLY) {printf("OROP");} else {return yy::parser::make_OROP(yytext);}}
"<" {if(USE_LEX_ONLY) {printf("LTOP");} else {return yy::parser::make_LTOP(yytext);}}
">" {if(USE_LEX_ONLY) {printf("GTOP");} else {return yy::parser::make_GTOP(yytext);}}
"=="    {if(USE_LEX_ONLY) {printf("EQUALSOP");} else {return yy::parser::make_EQUALSOP(yytext);}}
"+" {if(USE_LEX_ONLY) {printf("PLUSOP");} else {return yy::parser::make_PLUSOP(yytext);}}
"-" {if(USE_LEX_ONLY) {printf("MINUSOP");} else {return yy::parser::make_MINUSOP(yytext);}}
"/" {if(USE_LEX_ONLY) {printf("DEVIDEOP");} else {return yy::parser::make_DEVIDEOP(yytext);}}
"*" {if(USE_LEX_ONLY) {printf("MULTOP");} else {return yy::parser::make_MULTOP(yytext);}}
"(" {if(USE_LEX_ONLY) {printf("LP");} else {return yy::parser::make_LP(yytext);}}
")" {if(USE_LEX_ONLY) {printf("RP");} else {return yy::parser::make_RP(yytext);}}
0|-?[1-9][0-9]*   {if(USE_LEX_ONLY)      {printf("INT");} else {return yy::parser::make_INT(yytext);}}
true|false     {if(USE_LEX_ONLY)  {printf("BOELEAN");} else {return yy::parser::make_BOELEAN(yytext);}}
\n              {if(USE_LEX_ONLY) {printf("NEWLINE");} else {return yy::parser::make_NEWLINE(yytext);}}
%%  